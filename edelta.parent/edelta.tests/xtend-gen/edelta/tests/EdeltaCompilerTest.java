package edelta.tests;

import com.google.common.base.Joiner;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import edelta.tests.EdeltaAbstractTest;
import edelta.tests.EdeltaInjectorProviderTestableDerivedStateComputer;
import edelta.testutils.EdeltaTestUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.diagnostics.Severity;
import org.eclipse.xtext.resource.FileExtensionProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.util.JavaVersion;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.eclipse.xtext.xbase.testing.TemporaryFolder;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(EdeltaInjectorProviderTestableDerivedStateComputer.class)
@SuppressWarnings("all")
public class EdeltaCompilerTest extends EdeltaAbstractTest {
  @Rule
  @Inject
  public TemporaryFolder temporaryFolder;
  
  @Inject
  @Extension
  private CompilationTestHelper compilationTestHelper;
  
  @Inject
  private FileExtensionProvider extensionProvider;
  
  @Inject
  @Extension
  private ReflectExtensions _reflectExtensions;
  
  private static final String MODIFIED = "modified";
  
  @Before
  public void setup() {
    this.compilationTestHelper.setJavaVersion(JavaVersion.JAVA8);
  }
  
  @Test
  public void testEmptyProgram() {
    StringConcatenation _builder = new StringConcatenation();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testIncompleteProgram() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel ");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1, 
      false);
  }
  
  @Test
  public void testProgramWithPackage() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testOperationWithInferredReturnType() {
    CharSequence _operationWithInferredReturnType = this._inputs.operationWithInferredReturnType();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public boolean bar(final String s) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return s.isEmpty();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_operationWithInferredReturnType, _builder);
  }
  
  @Test
  public void testOperationWithReturnType() {
    CharSequence _operationWithReturnType = this._inputs.operationWithReturnType();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public boolean bar(final String s) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return s.isEmpty();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_operationWithReturnType, _builder);
  }
  
  @Test
  public void testOperationAccessingLib() {
    CharSequence _operationAccessingLib = this._inputs.operationAccessingLib();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public EClass bar(final String s) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return EdeltaLibrary.newEClass(s);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_operationAccessingLib, _builder);
  }
  
  @Test
  public void testOperationNewEClassWithInitializer() {
    CharSequence _operationNewEClassWithInitializer = this._inputs.operationNewEClassWithInitializer();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import java.util.function.Consumer;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public EClass bar(final String s) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EClass> _function = (EClass it) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EList<EClass> _eSuperTypes = it.getESuperTypes();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass _newEClass = EdeltaLibrary.newEClass(\"Base\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_eSuperTypes.add(_newEClass);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return EdeltaLibrary.newEClass(s, _function);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_operationNewEClassWithInitializer, _builder);
  }
  
  @Test
  public void testCompilationOfEcoreReferenceExpression() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("println(ecoreref(foo))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(FooClass)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("println(ecoreref(FooClass))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(myAttribute)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("println(ecoreref(myAttribute))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(FooEnum)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("println(ecoreref(FooEnum))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(FooEnumLiteral)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("println(ecoreref(FooEnumLiteral))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val ref = ecoreref(myReference)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EEnum;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EEnumLiteral;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EReference;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEPackage(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<EPackage>println(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo\", \"FooClass\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<EClass>println(getEClass(\"foo\", \"FooClass\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEAttribute(\"foo\", \"FooClass\", \"myAttribute\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<EAttribute>println(getEAttribute(\"foo\", \"FooClass\", \"myAttribute\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEEnum(\"foo\", \"FooEnum\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<EEnum>println(getEEnum(\"foo\", \"FooEnum\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEEnumLiteral(\"foo\", \"FooEnum\", \"FooEnumLiteral\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("InputOutput.<EEnumLiteral>println(getEEnumLiteral(\"foo\", \"FooEnum\", \"FooEnumLiteral\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final EReference ref = getEReference(\"foo\", \"FooClass\", \"myReference\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testCompilationOfEclassExpressionWithNonExistantEClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package foo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(NonExistent)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package foo;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getENamedElement(\"\", \"\", \"\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1, 
      false);
  }
  
  @Test
  public void testReferenceToCreatedEClass() {
    CharSequence _referenceToCreatedEClass = this._inputs.referenceToCreatedEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"NewClass\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void anotherTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEClass(\"foo\", \"NewClass\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("anotherTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_referenceToCreatedEClass, _builder);
  }
  
  @Test
  public void testReferenceToCreatedEClassRenamed() {
    CharSequence _referenceToCreatedEClassRenamed = this._inputs.referenceToCreatedEClassRenamed();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void creation(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"NewClass\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void renaming(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEClass(\"foo\", \"NewClass\").setName(\"changed\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void accessing(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEClass(\"foo\", \"changed\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEClass(\"foo\", \"changed\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("creation(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("renaming(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("accessing(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_referenceToCreatedEClassRenamed, _builder, 
      false);
  }
  
  @Test
  public void testUseAs() {
    CharSequence _useAsCustomEdeltaCreatingEClass = this._inputs.useAsCustomEdeltaCreatingEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.tests.additional.MyCustomEdelta;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private MyCustomEdelta my;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("my = new MyCustomEdelta(this);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.my.createANewEAttribute(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.my.createANewEClass());");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_useAsCustomEdeltaCreatingEClass, _builder);
  }
  
  @Test
  public void testUseAsExtension() {
    CharSequence _useAsCustomEdeltaAsExtensionCreatingEClass = this._inputs.useAsCustomEdeltaAsExtensionCreatingEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.tests.additional.MyCustomEdelta;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.Extension;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Extension");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private MyCustomEdelta my;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("my = new MyCustomEdelta(this);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.my.createANewEAttribute(this.my.createANewEClass());");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_useAsCustomEdeltaAsExtensionCreatingEClass, _builder);
  }
  
  @Test
  public void testInvalidUseAs() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import edelta.tests.additional.MyCustomEdelta");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("use MyCustomEdelta as");
    _builder.newLine();
    _builder.append("use as my");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("my.myMethod()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.tests.additional.MyCustomEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private Object my;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("     ");
    _builder_1.append("= new MyCustomEdelta(this);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("my = new (this);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("this.my./* name is null */;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1, 
      false);
  }
  
  @Test
  public void testUseAsExecution() {
    CharSequence _useAsCustomEdeltaCreatingEClass = this._inputs.useAsCustomEdeltaCreatingEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\" nsURI=\"http://foo\" nsPrefix=\"foo\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooDerivedClass\" eSuperTypes=\"#//FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EDataType\" name=\"FooDataType\" instanceClassName=\"java.lang.String\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"ANewClass\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"aNewAttr\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</eClassifiers>");
    _builder.newLine();
    _builder.append("</ecore:EPackage>");
    _builder.newLine();
    this.checkCompiledCodeExecution(_useAsCustomEdeltaCreatingEClass, _builder, 
      true);
  }
  
  @Test
  public void testUseAsExtensionExecution() {
    CharSequence _useAsCustomEdeltaAsExtensionCreatingEClass = this._inputs.useAsCustomEdeltaAsExtensionCreatingEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\" nsURI=\"http://foo\" nsPrefix=\"foo\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooDerivedClass\" eSuperTypes=\"#//FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EDataType\" name=\"FooDataType\" instanceClassName=\"java.lang.String\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"ANewClass\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"aNewAttr\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</eClassifiers>");
    _builder.newLine();
    _builder.append("</ecore:EPackage>");
    _builder.newLine();
    this.checkCompiledCodeExecution(_useAsCustomEdeltaAsExtensionCreatingEClass, _builder, 
      true);
  }
  
  @Test
  public void testStatefulUseAsExecution() {
    CharSequence _useAsCustomStatefulEdeltaCreatingEClass = this._inputs.useAsCustomStatefulEdeltaCreatingEClass();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\" nsURI=\"http://foo\" nsPrefix=\"foo\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooDerivedClass\" eSuperTypes=\"#//FooClass\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EDataType\" name=\"FooDataType\" instanceClassName=\"java.lang.String\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"ANewClass1\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"aNewAttr2\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</eClassifiers>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"ANewClass3\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"aNewAttr4\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</eClassifiers>");
    _builder.newLine();
    _builder.append("</ecore:EPackage>");
    _builder.newLine();
    this.checkCompiledCodeExecution(_useAsCustomStatefulEdeltaCreatingEClass, _builder, 
      true);
  }
  
  @Test
  public void testModifyEcore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aModificationTest epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EClassifiers += newEClass(\"ANewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ESuperTypes += newEClass(\"Base\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.EdeltaLibrary;");
    _builder_1.newLine();
    _builder_1.append("import java.util.function.Consumer;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.common.util.EList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClassifier;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aModificationTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EList<EClassifier> _eClassifiers = it.getEClassifiers();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EList<EClass> _eSuperTypes = it_1.getESuperTypes();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EClass _newEClass = EdeltaLibrary.newEClass(\"Base\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_eSuperTypes.add(_newEClass);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EClass _newEClass = EdeltaLibrary.newEClass(\"ANewClass\", _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eClassifiers.add(_newEClass);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aModificationTest(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testCompilationRenamedClassInModifyEcore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore modifyFoo epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo.FooClass).name = \"RenamedClass\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).EStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newEAttribute(\"anotherAttr\", ecoreref(FooDataType))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).abstract = true");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo.RenamedClass) => [abstract = true]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.EdeltaLibrary;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.common.util.EList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void modifyFoo(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo\", \"FooClass\").setName(\"RenamedClass\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EList<EStructuralFeature> _eStructuralFeatures = getEClass(\"foo\", \"RenamedClass\").getEStructuralFeatures();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EAttribute _newEAttribute = EdeltaLibrary.newEAttribute(\"anotherAttr\", getEDataType(\"foo\", \"FooDataType\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eStructuralFeatures.add(_newEAttribute);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo\", \"RenamedClass\").setAbstract(true);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Procedure1<EClass> _function = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("it_1.setAbstract(true);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ObjectExtensions.<EClass>operator_doubleArrow(");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("getEClass(\"foo\", \"RenamedClass\"), _function);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("modifyFoo(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testExecutionRenamedClassInModifyEcore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore modifyFoo epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo.FooClass).name = \"RenamedClass\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).EStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newEAttribute(\"anotherAttr\", ecoreref(FooDataType))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).abstract = true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_1.newLine();
    _builder_1.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\" nsURI=\"http://foo\" nsPrefix=\"foo\">");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"RenamedClass\" abstract=\"true\">");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"anotherAttr\" eType=\"#//FooDataType\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("</eClassifiers>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooDerivedClass\" eSuperTypes=\"#//RenamedClass\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EDataType\" name=\"FooDataType\" instanceClassName=\"java.lang.String\"/>");
    _builder_1.newLine();
    _builder_1.append("</ecore:EPackage>");
    _builder_1.newLine();
    this.checkCompiledCodeExecution(_builder, _builder_1, 
      true);
  }
  
  @Test
  public void testCompilationAfterInterpretationOfCreatedEClassStealingAttribute() {
    CharSequence _createEClassStealingAttribute = this._inputs.createEClassStealingAttribute();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import java.util.function.Consumer;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addEAttribute(it_1, getEAttribute(\"foo\", \"FooClass\", \"myAttribute\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"NewClass\", _function);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_createEClassStealingAttribute, _builder);
  }
  
  @Test
  public void testCompilationAfterInterpretationChangeEClassRemovingAttribute() {
    CharSequence _changeEClassRemovingAttribute = this._inputs.changeEClassRemovingAttribute();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EList<EStructuralFeature> _eStructuralFeatures = getEClass(\"foo\", \"FooClass\").getEStructuralFeatures();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("_eStructuralFeatures.remove(getEAttribute(\"foo\", \"FooClass\", \"myAttribute\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_changeEClassRemovingAttribute, _builder);
  }
  
  @Test
  public void testCompilationOfModifyEcoreCallingLibMethods() {
    CharSequence _modifyEcoreUsingLibMethods = this._inputs.modifyEcoreUsingLibMethods();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import java.util.function.Consumer;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EEnum;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EEnumLiteral;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class MyFile0 extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public MyFile0(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void aTest(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final Consumer<EAttribute> _function_1 = (EAttribute it_2) -> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("it_2.setLowerBound(1);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addNewEAttribute(it_1, \"ANewAttribute\", getEDataType(\"foo\", \"FooDataType\"), _function_1);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final Consumer<EReference> _function_2 = (EReference it_2) -> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("it_2.setLowerBound(1);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addNewEReference(it_1, \"ANewReference\", getEClass(\"foo\", \"FooClass\"), _function_2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"ANewClass\", _function);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EEnum> _function_1 = (EEnum it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final Consumer<EEnumLiteral> _function_2 = (EEnumLiteral it_2) -> {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("it_2.setValue(10);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addNewEEnumLiteral(it_1, \"ANewEnumLiteral\", _function_2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEEnum(it, \"ANewEnum\", _function_1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEDataType(it, \"ANewDataType\", \"java.lang.String\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEClass(\"foo\", \"ANewClass\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEAttribute(\"foo\", \"ANewClass\", \"ANewAttribute\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEReference(\"foo\", \"ANewClass\", \"ANewReference\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEEnum(\"foo\", \"ANewEnum\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEEnumLiteral(\"foo\", \"ANewEnum\", \"ANewEnumLiteral\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getEDataType(\"foo\", \"ANewDataType\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"foo\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("aTest(getEPackage(\"foo\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(_modifyEcoreUsingLibMethods, _builder);
  }
  
  @Test
  public void testCompilationEcorerefWhenAttributeRemovedFromOriginalContainer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore modifyFoo epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo.FooClass).name = \"Renamed\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(foo.Renamed).EStructuralFeatures.remove(ecoreref(foo.Renamed.myAttribute))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.common.util.EList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void modifyFoo(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo\", \"FooClass\").setName(\"Renamed\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EList<EStructuralFeature> _eStructuralFeatures = getEClass(\"foo\", \"Renamed\").getEStructuralFeatures();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eStructuralFeatures.remove(getEAttribute(\"foo\", \"Renamed\", \"myAttribute\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("modifyFoo(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testCompilationOfComplexOperationsWithSubPackages() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore modifyFoo epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("addNewESubpackage(\"anewsubpackage\", \"aprefix\", \"aURI\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addNewESubpackage(\"anestedsubpackage\", \"aprefix2\", \"aURI2\") [");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addNewEClass(\"ANestedSubPackageClass\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(anewsubpackage).addNewEClass(\"NewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("newEReference(\"newTestRef\", ecoreref(ANestedSubPackageClass))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(NewClass).name = \"RenamedClass\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).getEStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newEAttribute(\"added\", ecoreref(FooDataType))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.EdeltaLibrary;");
    _builder_1.newLine();
    _builder_1.append("import java.util.function.Consumer;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.common.util.EList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EReference;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void modifyFoo(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EPackage> _function = (EPackage it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Consumer<EPackage> _function_1 = (EPackage it_2) -> {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("EdeltaLibrary.addNewEClass(it_2, \"ANestedSubPackageClass\");");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EdeltaLibrary.addNewESubpackage(it_1, \"anestedsubpackage\", \"aprefix2\", \"aURI2\", _function_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EdeltaLibrary.addNewESubpackage(it, \"anewsubpackage\", \"aprefix\", \"aURI\", _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EClass> _function_1 = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EList<EStructuralFeature> _eStructuralFeatures = it_1.getEStructuralFeatures();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EReference _newEReference = EdeltaLibrary.newEReference(\"newTestRef\", getEClass(\"foo.anewsubpackage.anestedsubpackage\", \"ANestedSubPackageClass\"));");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_eStructuralFeatures.add(_newEReference);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EdeltaLibrary.addNewEClass(getEPackage(\"foo.anewsubpackage\"), \"NewClass\", _function_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo.anewsubpackage\", \"NewClass\").setName(\"RenamedClass\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EList<EStructuralFeature> _eStructuralFeatures = getEClass(\"foo.anewsubpackage\", \"RenamedClass\").getEStructuralFeatures();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EAttribute _newEAttribute = EdeltaLibrary.newEAttribute(\"added\", getEDataType(\"foo\", \"FooDataType\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eStructuralFeatures.add(_newEAttribute);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("modifyFoo(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testCompilationOfRenameReferencesAcrossEPackagesWithRealEcoreFiles() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences1\"");
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences2\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest1 epackage testecoreforreferences1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames WorkPlace.persons to renamedPersons");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(Person.works).EOpposite.name = \"renamedPersons\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("modifyEcore aTest2 epackage testecoreforreferences2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames Person.works to renamedWorks");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// using the already renamed feature (was persons)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(renamedPersons).EOpposite.name = \"renamedWorks\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final ResourceSet rs = this.createResourceSetWithEcores(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.TEST1_REFS_ECORE, EdeltaAbstractTest.TEST2_REFS_ECORE)), _builder);
    this.addEPackagesWithReferencesForTests(rs);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package test;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EReference;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Example extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Example() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Example(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest1(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EReference _eOpposite = getEReference(\"testecoreforreferences1\", \"Person\", \"works\").getEOpposite();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eOpposite.setName(\"renamedPersons\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest2(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EReference _eOpposite = getEReference(\"testecoreforreferences2\", \"WorkPlace\", \"renamedPersons\").getEOpposite();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eOpposite.setName(\"renamedWorks\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"testecoreforreferences1\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"testecoreforreferences2\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest1(getEPackage(\"testecoreforreferences1\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest2(getEPackage(\"testecoreforreferences2\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(rs, _builder_1, 
      true);
  }
  
  @Test
  public void testExecutionOfRenameReferencesAcrossEPackagesWithRealEcoreFiles() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences1\"");
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences2\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest1 epackage testecoreforreferences1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames WorkPlace.persons to renamedPersons");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(Person.works).EOpposite.name = \"renamedPersons\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("modifyEcore aTest2 epackage testecoreforreferences2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames Person.works to renamedWorks");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// using the already renamed feature (was persons)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(renamedPersons).EOpposite.name = \"renamedWorks\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_1.newLine();
    _builder_1.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"testecoreforreferences1\" nsURI=\"http://my.testecoreforreferences1.org\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("nsPrefix=\"testecoreforreferences1\">");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"Person\">");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"firstname\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"lastname\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"renamedWorks\" lowerBound=\"1\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("eType=\"ecore:EClass TestEcoreForReferences2.ecore#//WorkPlace\" eOpposite=\"TestEcoreForReferences2.ecore#//WorkPlace/renamedPersons\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("</eClassifiers>");
    _builder_1.newLine();
    _builder_1.append("</ecore:EPackage>");
    _builder_1.newLine();
    Pair<CharSequence, CharSequence> _mappedTo = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.TEST1_REFS_ECORE, _builder_1.toString());
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_2.newLine();
    _builder_2.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"testecoreforreferences2\" nsURI=\"http://my.testecoreforreferences2.org\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("nsPrefix=\"testecoreforreferences2\">");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"WorkPlace\">");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"renamedPersons\" upperBound=\"-1\"");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("eType=\"ecore:EClass TestEcoreForReferences1.ecore#//Person\" eOpposite=\"TestEcoreForReferences1.ecore#//Person/renamedWorks\"/>");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"address\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("</eClassifiers>");
    _builder_2.newLine();
    _builder_2.append("</ecore:EPackage>");
    _builder_2.newLine();
    Pair<CharSequence, CharSequence> _mappedTo_1 = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.TEST2_REFS_ECORE, _builder_2.toString());
    this.checkCompiledCodeExecution(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.TEST1_REFS_ECORE, EdeltaAbstractTest.TEST2_REFS_ECORE)), _builder, 
      Collections.<Pair<CharSequence, CharSequence>>unmodifiableList(CollectionLiterals.<Pair<CharSequence, CharSequence>>newArrayList(_mappedTo, _mappedTo_1)), 
      true);
  }
  
  @Test
  public void testCompilationOfRenameReferencesAcrossEPackagesSingleModifyEcore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences1\"");
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences2\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest1 epackage testecoreforreferences1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames WorkPlace.persons to renamedPersons");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(Person.works).EOpposite.name = \"renamedPersons\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames Person.works to renamedWorks");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// using the already renamed feature (was persons)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(renamedPersons).EOpposite.name = \"renamedWorks\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final ResourceSet rs = this.createResourceSetWithEcores(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.TEST1_REFS_ECORE, EdeltaAbstractTest.TEST2_REFS_ECORE)), _builder);
    this.addEPackagesWithReferencesForTests(rs);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package test;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EReference;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class Example extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Example() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Example(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest1(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EReference _eOpposite = getEReference(\"testecoreforreferences1\", \"Person\", \"works\").getEOpposite();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eOpposite.setName(\"renamedPersons\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EReference _eOpposite_1 = getEReference(\"testecoreforreferences2\", \"WorkPlace\", \"renamedPersons\").getEOpposite();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eOpposite_1.setName(\"renamedWorks\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"testecoreforreferences1\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"testecoreforreferences2\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest1(getEPackage(\"testecoreforreferences1\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(rs, _builder_1, 
      true);
  }
  
  @Test
  public void testExecutionOfRenameReferencesAcrossEPackagesSingleModifyEcore() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences1\"");
    _builder.newLine();
    _builder.append("metamodel \"testecoreforreferences2\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest1 epackage testecoreforreferences1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames WorkPlace.persons to renamedPersons");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(Person.works).EOpposite.name = \"renamedPersons\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// renames Person.works to renamedWorks");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// using the already renamed feature (was persons)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(renamedPersons).EOpposite.name = \"renamedWorks\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_1.newLine();
    _builder_1.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"testecoreforreferences1\" nsURI=\"http://my.testecoreforreferences1.org\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("nsPrefix=\"testecoreforreferences1\">");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"Person\">");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"firstname\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"lastname\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"renamedWorks\" lowerBound=\"1\"");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("eType=\"ecore:EClass TestEcoreForReferences2.ecore#//WorkPlace\" eOpposite=\"TestEcoreForReferences2.ecore#//WorkPlace/renamedPersons\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("</eClassifiers>");
    _builder_1.newLine();
    _builder_1.append("</ecore:EPackage>");
    _builder_1.newLine();
    Pair<CharSequence, CharSequence> _mappedTo = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.TEST1_REFS_ECORE, _builder_1.toString());
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_2.newLine();
    _builder_2.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"testecoreforreferences2\" nsURI=\"http://my.testecoreforreferences2.org\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("nsPrefix=\"testecoreforreferences2\">");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"WorkPlace\">");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"renamedPersons\" upperBound=\"-1\"");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("eType=\"ecore:EClass TestEcoreForReferences1.ecore#//Person\" eOpposite=\"TestEcoreForReferences1.ecore#//Person/renamedWorks\"/>");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"address\" eType=\"ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString\"/>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("</eClassifiers>");
    _builder_2.newLine();
    _builder_2.append("</ecore:EPackage>");
    _builder_2.newLine();
    Pair<CharSequence, CharSequence> _mappedTo_1 = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.TEST2_REFS_ECORE, _builder_2.toString());
    this.checkCompiledCodeExecution(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.TEST1_REFS_ECORE, EdeltaAbstractTest.TEST2_REFS_ECORE)), _builder, 
      Collections.<Pair<CharSequence, CharSequence>>unmodifiableList(CollectionLiterals.<Pair<CharSequence, CharSequence>>newArrayList(_mappedTo, _mappedTo_1)), 
      true);
  }
  
  @Test
  public void testExecutionOfModificationsOfMetamodelsAcrossSeveralFilesIntroducingDepOnAnotherMetamodel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.emf.ecore.EClass");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package test1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"simple\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def setBaseClass(EClass c) : void {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("c.getESuperTypes += ecoreref(SimpleClass)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.emf.ecore.EClass");
    _builder_1.newLine();
    _builder_1.append("import test1.MyFile0");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("package test2");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("metamodel \"anothersimple\"");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("use test1.MyFile0 as extension my");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("modifyEcore aModificationTest epackage anothersimple {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// the other file\'s operation will set the");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// base class of this package class to another package class");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("ecoreref(AnotherSimpleClass).setBaseClass");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// now anothersimple refers to simple");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// now modify the abstract property of the");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// superclass in the other package");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("ecoreref(AnotherSimpleClass).ESuperTypes.head.abstract = true");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_2.newLine();
    _builder_2.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"simple\" nsURI=\"http://www.simple\" nsPrefix=\"simple\">");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"SimpleClass\" abstract=\"true\"/>");
    _builder_2.newLine();
    _builder_2.append("</ecore:EPackage>");
    _builder_2.newLine();
    Pair<CharSequence, CharSequence> _mappedTo = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.SIMPLE_ECORE, _builder_2.toString());
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_3.newLine();
    _builder_3.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"anothersimple\" nsURI=\"http://www.anothersimple\" nsPrefix=\"anothersimple\">");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"AnotherSimpleClass\" eSuperTypes=\"Simple.ecore#//SimpleClass\"/>");
    _builder_3.newLine();
    _builder_3.append("</ecore:EPackage>");
    _builder_3.newLine();
    Pair<CharSequence, CharSequence> _mappedTo_1 = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.ANOTHER_SIMPLE_ECORE, _builder_3.toString());
    this.checkCompiledCodeExecutionWithSeveralFiles(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.SIMPLE_ECORE, EdeltaAbstractTest.ANOTHER_SIMPLE_ECORE)), 
      Collections.<CharSequence>unmodifiableList(CollectionLiterals.<CharSequence>newArrayList(_builder, _builder_1)), 
      "test2.MyFile1", 
      Collections.<Pair<CharSequence, CharSequence>>unmodifiableList(CollectionLiterals.<Pair<CharSequence, CharSequence>>newArrayList(_mappedTo, _mappedTo_1)), 
      true);
  }
  
  @Test
  public void testExecutionOfModificationsOfMetamodelsAcrossSeveralFilesIntroducingMutualDepOnAnotherMetamodel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.emf.ecore.EClass");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package test1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"simple\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def setBaseClass(EClass c) : void {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("c.getESuperTypes += ecoreref(SimpleClass)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.emf.ecore.EClass");
    _builder_1.newLine();
    _builder_1.append("import test1.MyFile0");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("package test2");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("metamodel \"anothersimple\"");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("use test1.MyFile0 as extension my");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("modifyEcore aModificationTest epackage anothersimple {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// the other file\'s operation will set the");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// base class of this package class to another package class");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("ecoreref(AnotherSimpleClass).setBaseClass");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// now anothersimple refers to simple (created dependency)");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("val referenceToSuperClass = ecoreref(AnotherSimpleClass).ESuperTypes.head");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// also add a reference to the other epackage");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("ecoreref(AnotherSimpleClass)");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(".addNewEReference(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("\"aReferenceToSimpleClass\",");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("referenceToSuperClass");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// now modify the superclass in the other package");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("// introducing a mutual dependency");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("referenceToSuperClass");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(".addNewEReference(\"aReferenceToAnotherSimpleClass\", ecoreref(AnotherSimpleClass)) [");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("// also make the references bidirectional");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("EOpposite = ecoreref(aReferenceToSimpleClass)");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("ecoreref(aReferenceToSimpleClass).EOpposite = it");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("]");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_2.newLine();
    _builder_2.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"simple\" nsURI=\"http://www.simple\" nsPrefix=\"simple\">");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"SimpleClass\">");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"aReferenceToAnotherSimpleClass\"");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("eType=\"ecore:EClass AnotherSimple.ecore#//AnotherSimpleClass\" eOpposite=\"AnotherSimple.ecore#//AnotherSimpleClass/aReferenceToSimpleClass\"/>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("</eClassifiers>");
    _builder_2.newLine();
    _builder_2.append("</ecore:EPackage>");
    _builder_2.newLine();
    Pair<CharSequence, CharSequence> _mappedTo = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.SIMPLE_ECORE, _builder_2.toString());
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_3.newLine();
    _builder_3.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"anothersimple\" nsURI=\"http://www.anothersimple\" nsPrefix=\"anothersimple\">");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"AnotherSimpleClass\" eSuperTypes=\"Simple.ecore#//SimpleClass\">");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"aReferenceToSimpleClass\"");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("eType=\"ecore:EClass Simple.ecore#//SimpleClass\" eOpposite=\"Simple.ecore#//SimpleClass/aReferenceToAnotherSimpleClass\"/>");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("</eClassifiers>");
    _builder_3.newLine();
    _builder_3.append("</ecore:EPackage>");
    _builder_3.newLine();
    Pair<CharSequence, CharSequence> _mappedTo_1 = Pair.<CharSequence, CharSequence>of(EdeltaAbstractTest.ANOTHER_SIMPLE_ECORE, _builder_3.toString());
    this.checkCompiledCodeExecutionWithSeveralFiles(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.SIMPLE_ECORE, EdeltaAbstractTest.ANOTHER_SIMPLE_ECORE)), 
      Collections.<CharSequence>unmodifiableList(CollectionLiterals.<CharSequence>newArrayList(_builder, _builder_1)), 
      "test2.MyFile1", 
      Collections.<Pair<CharSequence, CharSequence>>unmodifiableList(CollectionLiterals.<Pair<CharSequence, CharSequence>>newArrayList(_mappedTo, _mappedTo_1)), 
      true);
  }
  
  @Test
  public void testExecutionOfComplexOperationsWithSubPackages() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore modifyFoo epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("addNewESubpackage(\"anewsubpackage\", \"anewsubpackage\", \"http://anewsubpackage\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addNewESubpackage(\"anestedsubpackage\", \"anestedsubpackage\", \"http://anestedsubpackage\") [");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addNewEClass(\"ANestedSubPackageClass\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(anewsubpackage).addNewEClass(\"NewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("newEReference(\"newTestRef\", ecoreref(ANestedSubPackageClass))");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(NewClass).name = \"RenamedClass\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(RenamedClass).getEStructuralFeatures +=");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newEAttribute(\"added\", ecoreref(FooDataType))");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_1.newLine();
    _builder_1.append("<ecore:EPackage xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" name=\"foo\" nsURI=\"http://foo\" nsPrefix=\"foo\">");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooClass\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"FooDerivedClass\" eSuperTypes=\"#//FooClass\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EDataType\" name=\"FooDataType\" instanceClassName=\"java.lang.String\"/>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("<eSubpackages name=\"anewsubpackage\" nsURI=\"http://anewsubpackage\" nsPrefix=\"anewsubpackage\">");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"RenamedClass\">");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EReference\" name=\"newTestRef\" eType=\"#//anewsubpackage/anestedsubpackage/ANestedSubPackageClass\"/>");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("<eStructuralFeatures xsi:type=\"ecore:EAttribute\" name=\"added\" eType=\"#//FooDataType\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("</eClassifiers>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("<eSubpackages name=\"anestedsubpackage\" nsURI=\"http://anestedsubpackage\" nsPrefix=\"anestedsubpackage\">");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("<eClassifiers xsi:type=\"ecore:EClass\" name=\"ANestedSubPackageClass\"/>");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("</eSubpackages>");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("</eSubpackages>");
    _builder_1.newLine();
    _builder_1.append("</ecore:EPackage>");
    _builder_1.newLine();
    this.checkCompiledCodeExecution(_builder, _builder_1, 
      true);
  }
  
  @Test
  public void testCompilationOfSeveralFilesWithUseAs() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.emf.ecore.EClass");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EcorePackage");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package test1");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def enrichWithReference(EClass c, String prefix) : void {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("c.addNewEReference(prefix + \"Ref\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EcorePackage.eINSTANCE.EObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import org.eclipse.emf.ecore.EClass");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EcorePackage");
    _builder_1.newLine();
    _builder_1.append("import test1.MyFile0");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("package test2");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("use test1.MyFile0 as extension my");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("def enrichWithAttribute(EClass c, String prefix) : void {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("c.addNewEAttribute(prefix + \"Attr\",");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("EcorePackage.eINSTANCE.EString)");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("c.enrichWithReference(prefix)");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("import org.eclipse.emf.ecore.EClass");
    _builder_2.newLine();
    _builder_2.append("import test2.MyFile1");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("package test3");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("metamodel \"foo\"");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("use test2.MyFile1 as extension my");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("modifyEcore aModificationTest epackage foo {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("ecoreref(FooClass)");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append(".enrichWithAttribute(\"prefix\")");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("// attribute and reference are added by the calls");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("// to external operations!");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("ecoreref(prefixAttr).changeable = true");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("ecoreref(prefixRef).containment = true");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package test3;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import edelta.lib.AbstractEdelta;");
    _builder_3.newLine();
    _builder_3.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_3.newLine();
    _builder_3.append("import org.eclipse.xtext.xbase.lib.Extension;");
    _builder_3.newLine();
    _builder_3.append("import test2.MyFile1;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("@SuppressWarnings(\"all\")");
    _builder_3.newLine();
    _builder_3.append("public class MyFile2 extends AbstractEdelta {");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Extension");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("private MyFile1 my;");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public MyFile2() {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("my = new MyFile1(this);");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public MyFile2(final AbstractEdelta other) {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("super(other);");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public void aModificationTest(final EPackage it) {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("this.my.enrichWithAttribute(getEClass(\"foo\", \"FooClass\"), \"prefix\");");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("getEAttribute(\"foo\", \"FooClass\", \"prefixAttr\").setChangeable(true);");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("getEReference(\"foo\", \"FooClass\", \"prefixRef\").setContainment(true);");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("public void performSanityChecks() throws Exception {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("protected void doExecute() throws Exception {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("aModificationTest(getEPackage(\"foo\"));");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    Pair<String, CharSequence> _mappedTo = Pair.<String, CharSequence>of("test3.MyFile2", _builder_3.toString());
    this.checkCompilationOfSeveralFiles(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(_builder.toString(), _builder_1.toString(), _builder_2.toString())), 
      Collections.<Pair<String, CharSequence>>unmodifiableList(CollectionLiterals.<Pair<String, CharSequence>>newArrayList(_mappedTo)));
  }
  
  @Test
  public void testCompilationOfNonAmbiguousEcorerefAfterRemoval() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.emf.ecore.EAttribute");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"mainpackage\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest epackage mainpackage {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("addNewEClass(\"ANewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addNewEAttribute(\"created\", null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("addNewEClass(\"AnotherNewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addNewEReference(\"created\", null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EClassifiers -= ecoreref(ANewClass)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// \"created\" is not ambiguous anymore");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// and it\'s correctly typed (EReference, not EAttribute)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val EReference r = ecoreref(created) // OK");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final ResourceSet rs = this.createResourceSet(_builder);
    this.addEPackageWithSubPackageForTests(rs);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.EdeltaLibrary;");
    _builder_1.newLine();
    _builder_1.append("import java.util.function.Consumer;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.common.util.EList;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClassifier;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EReference;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EdeltaLibrary.addNewEAttribute(it_1, \"created\", null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EdeltaLibrary.addNewEClass(it, \"ANewClass\", _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EClass> _function_1 = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("EdeltaLibrary.addNewEReference(it_1, \"created\", null);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EdeltaLibrary.addNewEClass(it, \"AnotherNewClass\", _function_1);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EList<EClassifier> _eClassifiers = it.getEClassifiers();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("_eClassifiers.remove(getEClass(\"mainpackage\", \"ANewClass\"));");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final EReference r = getEReference(\"mainpackage\", \"AnotherNewClass\", \"created\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"mainpackage\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest(getEPackage(\"mainpackage\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(rs, _builder_1, 
      true);
  }
  
  @Test
  public void testEcoreRefExpForCreatedEClassInInitializer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.eclipse.emf.ecore.EcoreFactory");
    _builder.newLine();
    _builder.newLine();
    _builder.append("metamodel \"foo\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("modifyEcore aTest epackage foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("addNewEClass(\"NewClass\") [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// even though the name is set after the initializer");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// is executed we can still refer the newly created EClass");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ecoreref(NewClass).abstract = true");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ecoreref(NewClass).name = \"Renamed\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ecoreref(Renamed)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package edelta;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.AbstractEdelta;");
    _builder_1.newLine();
    _builder_1.append("import edelta.lib.EdeltaLibrary;");
    _builder_1.newLine();
    _builder_1.append("import java.util.function.Consumer;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EClass;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EPackage;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class MyFile0 extends AbstractEdelta {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public MyFile0(final AbstractEdelta other) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("super(other);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void aTest(final EPackage it) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("getEClass(\"foo\", \"NewClass\").setAbstract(true);");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("getEClass(\"foo\", \"NewClass\").setName(\"Renamed\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("EdeltaLibrary.addNewEClass(it, \"NewClass\", _function);");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("getEClass(\"foo\", \"Renamed\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void performSanityChecks() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("ensureEPackageIsLoaded(\"foo\");");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected void doExecute() throws Exception {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("aTest(getEPackage(\"foo\"));");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.checkCompilation(_builder, _builder_1);
  }
  
  @Test
  public void testCompilationOfPersonListExampleModifyEcore() {
    final ResourceSet rs = this.createResourceSetWithEcores(
      Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(EdeltaAbstractTest.PERSON_LIST_ECORE)), 
      this._inputs.personListExampleModifyEcore());
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package edelta.personlist.example;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import edelta.lib.AbstractEdelta;");
    _builder.newLine();
    _builder.append("import edelta.lib.EdeltaLibrary;");
    _builder.newLine();
    _builder.append("import edelta.refactorings.lib.EdeltaRefactorings;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.function.Consumer;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EAttribute;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.CollectionLiterals;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.Extension;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.ObjectExtensions;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"all\")");
    _builder.newLine();
    _builder.append("public class Example extends AbstractEdelta {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Extension");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private EdeltaRefactorings refactorings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Example() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("refactorings = new EdeltaRefactorings(this);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Example(final AbstractEdelta other) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(other);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void improvePerson(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Procedure1<EClass> _function = (EClass it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.refactorings.introduceSubclasses(it_1, ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getEAttribute(\"PersonList\", \"Person\", \"gender\"), ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getEEnum(\"PersonList\", \"Gender\"));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addEAttribute(it_1, ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.refactorings.mergeAttributes(\"name\", ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("getEAttribute(\"PersonList\", \"Person\", \"firstname\").getEAttributeType(), ");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("Collections.<EAttribute>unmodifiableList(CollectionLiterals.<EAttribute>newArrayList(getEAttribute(\"PersonList\", \"Person\", \"firstname\"), getEAttribute(\"PersonList\", \"Person\", \"lastname\")))));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ObjectExtensions.<EClass>operator_doubleArrow(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("getEClass(\"PersonList\", \"Person\"), _function);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void introducePlace(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("it_1.setAbstract(true);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.refactorings.extractIntoSuperclass(it_1, Collections.<EAttribute>unmodifiableList(CollectionLiterals.<EAttribute>newArrayList(getEAttribute(\"PersonList\", \"LivingPlace\", \"address\"), getEAttribute(\"PersonList\", \"WorkPlace\", \"address\"))));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"Place\", _function);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void introduceWorkingPosition(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Consumer<EClass> _function = (EClass it_1) -> {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EdeltaLibrary.addNewEAttribute(it_1, \"description\", getEDataType(\"ecore\", \"EString\"));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.refactorings.extractMetaClass(it_1, getEReference(\"PersonList\", \"Person\", \"works\"), \"position\", \"works\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addNewEClass(it, \"WorkingPosition\", _function);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void improveList(final EPackage it) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EdeltaLibrary.addEReference(getEClass(\"PersonList\", \"List\"), ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.refactorings.mergeReferences(\"places\", ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getEClass(\"PersonList\", \"Place\"), ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Collections.<EReference>unmodifiableList(CollectionLiterals.<EReference>newArrayList(getEReference(\"PersonList\", \"List\", \"wplaces\"), getEReference(\"PersonList\", \"List\", \"lplaces\")))));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void performSanityChecks() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"PersonList\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ensureEPackageIsLoaded(\"ecore\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void doExecute() throws Exception {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("improvePerson(getEPackage(\"PersonList\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("introducePlace(getEPackage(\"PersonList\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("introduceWorkingPosition(getEPackage(\"PersonList\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("improveList(getEPackage(\"PersonList\"));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.checkCompilation(rs, _builder, 
      true);
  }
  
  private void checkCompilation(final CharSequence input, final CharSequence expectedGeneratedJava) {
    this.checkCompilation(input, expectedGeneratedJava, true);
  }
  
  private void checkCompilation(final CharSequence input, final CharSequence expectedGeneratedJava, final boolean checkValidationErrors) {
    final ResourceSet rs = this.createResourceSet(input);
    this.checkCompilation(rs, expectedGeneratedJava, checkValidationErrors);
  }
  
  private void checkCompilation(final ResourceSet rs, final CharSequence expectedGeneratedJava, final boolean checkValidationErrors) {
    final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
      if (checkValidationErrors) {
        this.assertNoValidationErrors(it);
      }
      if ((expectedGeneratedJava != null)) {
        this.assertGeneratedJavaCode(it, expectedGeneratedJava);
      }
      if (checkValidationErrors) {
        this.assertGeneratedJavaCodeCompiles(it);
      }
    };
    this.compilationTestHelper.compile(rs, _function);
  }
  
  private void checkCompilationOfSeveralFiles(final List<? extends CharSequence> inputs, final List<Pair<String, CharSequence>> expectations) {
    final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
      this.assertNoValidationErrors(it);
      for (final Pair<String, CharSequence> expectation : expectations) {
        Assert.assertEquals(expectation.getValue().toString(), it.getGeneratedCode(expectation.getKey()));
      }
      this.assertGeneratedJavaCodeCompiles(it);
    };
    this.compilationTestHelper.compile(this.createResourceSet(((CharSequence[])Conversions.unwrapArray(inputs, CharSequence.class))), _function);
  }
  
  private void assertNoValidationErrors(final CompilationTestHelper.Result it) {
    final Function1<Issue, Boolean> _function = (Issue it_1) -> {
      Severity _severity = it_1.getSeverity();
      return Boolean.valueOf(Objects.equal(_severity, Severity.ERROR));
    };
    final Iterable<Issue> allErrors = IterableExtensions.<Issue>filter(it.getErrorsAndWarnings(), _function);
    boolean _isEmpty = IterableExtensions.isEmpty(allErrors);
    boolean _not = (!_isEmpty);
    if (_not) {
      String _join = Joiner.on(",").join(allErrors);
      String _plus = ("One or more resources contained errors : " + _join);
      throw new IllegalStateException(_plus);
    }
  }
  
  private void assertGeneratedJavaCode(final CompilationTestHelper.Result r, final CharSequence expected) {
    Assert.assertEquals(expected.toString(), r.getSingleGeneratedCode());
  }
  
  private Class<?> assertGeneratedJavaCodeCompiles(final CompilationTestHelper.Result r) {
    return r.getCompiledClass();
  }
  
  private ResourceSet createResourceSet(final CharSequence... inputs) {
    try {
      final ArrayList<Pair<String, CharSequence>> pairs = this.createInputPairs(inputs);
      final ResourceSet rs = this.compilationTestHelper.resourceSet(((Pair<String, ? extends CharSequence>[])Conversions.unwrapArray(pairs, Pair.class)));
      this.addEPackageForTests(rs);
      return rs;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private ArrayList<Pair<String, CharSequence>> createInputPairs(final CharSequence[] inputs) {
    ArrayList<Pair<String, CharSequence>> _newArrayList = CollectionLiterals.<Pair<String, CharSequence>>newArrayList();
    final Procedure1<ArrayList<Pair<String, CharSequence>>> _function = (ArrayList<Pair<String, CharSequence>> list) -> {
      final Procedure2<CharSequence, Integer> _function_1 = (CharSequence e, Integer i) -> {
        String _primaryFileExtension = this.extensionProvider.getPrimaryFileExtension();
        String _plus = ((("MyFile" + i) + ".") + _primaryFileExtension);
        Pair<String, CharSequence> _mappedTo = Pair.<String, CharSequence>of(_plus, e);
        list.add(_mappedTo);
      };
      IterableExtensions.<CharSequence>forEach(((Iterable<CharSequence>)Conversions.doWrapArray(inputs)), _function_1);
    };
    return ObjectExtensions.<ArrayList<Pair<String, CharSequence>>>operator_doubleArrow(_newArrayList, _function);
  }
  
  private ResourceSet createResourceSetWithEcores(final List<String> ecoreNames, final CharSequence input) {
    try {
      String _loadFile = EdeltaTestUtils.loadFile((EdeltaAbstractTest.METAMODEL_PATH + EdeltaAbstractTest.ECORE_ECORE));
      Pair<String, String> _mappedTo = Pair.<String, String>of(EdeltaAbstractTest.ECORE_ECORE, _loadFile);
      String _primaryFileExtension = this.extensionProvider.getPrimaryFileExtension();
      String _plus = ("Example." + _primaryFileExtension);
      Pair<String, CharSequence> _mappedTo_1 = Pair.<String, CharSequence>of(_plus, input);
      final ArrayList<Pair<String, ? extends CharSequence>> pairs = CollectionLiterals.<Pair<String, ? extends CharSequence>>newArrayList(_mappedTo, _mappedTo_1);
      final Function1<String, Pair<String, String>> _function = (String ecoreName) -> {
        try {
          String _loadFile_1 = EdeltaTestUtils.loadFile((EdeltaAbstractTest.METAMODEL_PATH + ecoreName));
          return Pair.<String, String>of(ecoreName, _loadFile_1);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      List<Pair<String, String>> _map = ListExtensions.<String, Pair<String, String>>map(ecoreNames, _function);
      Iterables.<Pair<String, ? extends CharSequence>>addAll(pairs, _map);
      final ResourceSet rs = this.compilationTestHelper.resourceSet(((Pair<String, ? extends CharSequence>[])Conversions.unwrapArray(pairs, Pair.class)));
      return rs;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private ResourceSet createResourceSetWithEcoresAndSeveralInputs(final List<String> ecoreNames, final List<CharSequence> inputs) {
    try {
      String _loadFile = EdeltaTestUtils.loadFile((EdeltaAbstractTest.METAMODEL_PATH + EdeltaAbstractTest.ECORE_ECORE));
      Pair<String, String> _mappedTo = Pair.<String, String>of(EdeltaAbstractTest.ECORE_ECORE, _loadFile);
      final ArrayList<Pair<String, String>> ecorePairs = CollectionLiterals.<Pair<String, String>>newArrayList(_mappedTo);
      final Function1<String, Pair<String, String>> _function = (String ecoreName) -> {
        try {
          String _loadFile_1 = EdeltaTestUtils.loadFile((EdeltaAbstractTest.METAMODEL_PATH + ecoreName));
          return Pair.<String, String>of(ecoreName, _loadFile_1);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      List<Pair<String, String>> _map = ListExtensions.<String, Pair<String, String>>map(ecoreNames, _function);
      Iterables.<Pair<String, String>>addAll(ecorePairs, _map);
      final ArrayList<Pair<String, CharSequence>> inputPairs = this.createInputPairs(((CharSequence[])Conversions.unwrapArray(inputs, CharSequence.class)));
      Iterable<Pair<String, ? extends CharSequence>> _plus = Iterables.<Pair<String, ? extends CharSequence>>concat(ecorePairs, inputPairs);
      final ResourceSet rs = this.compilationTestHelper.resourceSet(((Pair<String, ? extends CharSequence>[])Conversions.unwrapArray(_plus, Pair.class)));
      return rs;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void checkCompiledCodeExecution(final CharSequence input, final CharSequence expectedGeneratedEcore, final boolean checkValidationErrors) {
    this.wipeModifiedDirectoryContents();
    final ResourceSet rs = this.createResourceSet(input);
    final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
      try {
        if (checkValidationErrors) {
          this.assertNoValidationErrors(it);
        }
        if (checkValidationErrors) {
          this.assertGeneratedJavaCodeCompiles(it);
        }
        final Class<?> genClass = it.getCompiledClass();
        final Object edeltaObj = genClass.getDeclaredConstructor().newInstance();
        this._reflectExtensions.invoke(edeltaObj, "loadEcoreFile", new Object[] { "testecores/foo.ecore" });
        this._reflectExtensions.invoke(edeltaObj, "execute");
        this._reflectExtensions.invoke(edeltaObj, "saveModifiedEcores", new Object[] { EdeltaCompilerTest.MODIFIED });
        EdeltaTestUtils.compareSingleFileContents((EdeltaCompilerTest.MODIFIED + "/foo.ecore"), expectedGeneratedEcore.toString());
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    this.compilationTestHelper.compile(rs, _function);
  }
  
  private void checkCompiledCodeExecution(final List<String> ecoreNames, final CharSequence input, final List<Pair<CharSequence, CharSequence>> expectedModifiedEcores, final boolean checkValidationErrors) {
    this.wipeModifiedDirectoryContents();
    final ResourceSet rs = this.createResourceSetWithEcores(ecoreNames, input);
    final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
      if (checkValidationErrors) {
        this.assertNoValidationErrors(it);
      }
      if (checkValidationErrors) {
        this.assertGeneratedJavaCodeCompiles(it);
      }
      final Class<?> genClass = it.getCompiledClass();
      this.checkExecutionAndAssertExpectedModifiedEcores(genClass, ecoreNames, expectedModifiedEcores);
    };
    this.compilationTestHelper.compile(rs, _function);
  }
  
  private void checkCompiledCodeExecutionWithSeveralFiles(final List<String> ecoreNames, final List<CharSequence> inputs, final String classToExecute, final List<Pair<CharSequence, CharSequence>> expectedModifiedEcores, final boolean checkValidationErrors) {
    this.wipeModifiedDirectoryContents();
    final ResourceSet rs = this.createResourceSetWithEcoresAndSeveralInputs(ecoreNames, inputs);
    final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
      if (checkValidationErrors) {
        this.assertNoValidationErrors(it);
      }
      if (checkValidationErrors) {
        this.assertGeneratedJavaCodeCompiles(it);
      }
      final Class<?> genClass = it.getCompiledClass(classToExecute);
      this.checkExecutionAndAssertExpectedModifiedEcores(genClass, ecoreNames, expectedModifiedEcores);
    };
    this.compilationTestHelper.compile(rs, _function);
  }
  
  private void checkExecutionAndAssertExpectedModifiedEcores(final Class<?> genClass, final List<String> ecoreNames, final List<Pair<CharSequence, CharSequence>> expectedModifiedEcores) {
    try {
      final Object edeltaObj = genClass.getDeclaredConstructor().newInstance();
      for (final String ecoreName : ecoreNames) {
        this._reflectExtensions.invoke(edeltaObj, "loadEcoreFile", new Object[] { (EdeltaAbstractTest.METAMODEL_PATH + ecoreName) });
      }
      this._reflectExtensions.invoke(edeltaObj, "execute");
      this._reflectExtensions.invoke(edeltaObj, "saveModifiedEcores", new Object[] { EdeltaCompilerTest.MODIFIED });
      for (final Pair<CharSequence, CharSequence> expected : expectedModifiedEcores) {
        CharSequence _key = expected.getKey();
        String _plus = ((EdeltaCompilerTest.MODIFIED + "/") + _key);
        EdeltaTestUtils.compareSingleFileContents(_plus, 
          expected.getValue().toString());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void wipeModifiedDirectoryContents() {
    EdeltaTestUtils.cleanDirectory(EdeltaCompilerTest.MODIFIED);
  }
}
