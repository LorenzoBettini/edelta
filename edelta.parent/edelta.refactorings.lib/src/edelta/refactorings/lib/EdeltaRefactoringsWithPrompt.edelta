import edelta.refactorings.lib.helper.EdeltaEObjectHelper
import edelta.refactorings.lib.helper.EdeltaPromptHelper
import java.util.Collection
import java.util.List
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EClass

package edelta.refactorings.lib

metamodel "ecore"

use EdeltaRefactorings as refactorings

/**
 * Creates the classes with the given names as subclasses of the passed
 * superClass, which will then be made abstract; For model migration it
 * prompts the user on the console.
 * 
 * @see EdeltaRefactorings#introduceSubclasses(EClass, Collection, edelta.lib.EdeltaModelMigrator.EObjectFunction)
 * 
 * @param superClass
 * @param name
 */
def introduceSubclassesInteractive(EClass superClass, List<String> names) : Collection<EClass> {
	refactorings.introduceSubclasses(superClass, names) [
		oldObj |
		val helper = new EdeltaEObjectHelper
		EdeltaPromptHelper.show("Migrating " + helper.represent(oldObj))
		EdeltaPromptHelper.show(helper.positionInContainter(oldObj))
		val choice = EdeltaPromptHelper.choice(names)
		return createInstance(superClass.EPackage.getEClass(choice))
	]
}

def mergeStringAttributes(String newAttributeName, Collection<EAttribute> attributes) : EAttribute {
	refactorings.checkType(attributes.head, ecoreref(EString))
	refactorings.mergeAttributes(
		newAttributeName,
		attributes,
		[oldValues|
			val stringValues = oldValues.filterNull.map[toString]
			if (stringValues.empty)
				return null
			EdeltaPromptHelper.show("Merging values: " +
				(stringValues).join(", ")
			)
			val sep = EdeltaPromptHelper.ask("Separator?")
			return stringValues.join(sep)
		]
	)
}
