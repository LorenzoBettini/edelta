/**
 * @param superclass where to pull up a single instance of the passed attributes
 * @param the attributes that are expected to be the same; the first element will be
 * pulled up in the superclass
 */
def extractIntoSuperclass(EClass superclass, List<EAttribute> attrs){
	val extracted_attr = attrs.head;
	// print(extracted_attr.name);
	// already created from outside in the right package
	// extracted_attr.EContainingClass.EPackage.EClassifiers+=superclass;
	for (attr : attrs) {
		attr.EContainingClass => [
			// set supertype of the EClass of the attribute
			addESuperType(superclass)
			// and then remove the attribute from the original EClass
			EStructuralFeatures -= attr
		]
	}

	superclass.EStructuralFeatures += extracted_attr;
}

/**
 * @param extractedClass the created EClass created representing the extracted metaclass
 * @param reference
 * @param newReferenceName the new name for the reference from the owner class to the
 * extracted class (basically used to rename the original passed reference)
 * @param newOppositeReferenceName the new name for the opposite reference from the original
 * target class to the extracted class (basically used to rename the original opposite reference)
 */
def extractMetaClass(EClass extractedClass, EReference reference,
				String newReferenceName, String newOppositeReferenceName) : void {
	val ref_in = newEReference(newOppositeReferenceName, extractedClass) [
		lowerBound = reference.EOpposite.lowerBound;
		upperBound = 1;
		// f.EOpposite.upperBound;
	];

	val old_ref = newEReference(reference.name, reference.EReferenceType) [
		lowerBound = 1;
		upperBound = 1;
		EOpposite = ref_in;
	];

	extractedClass.addEReference(old_ref);
	ref_in.EOpposite = old_ref;
	reference.EOpposite.lowerBound = 1;
	reference.EOpposite.upperBound = 1;

	extractedClass.addEReference(reference.EOpposite);

	// already created from outside in the right package
	// f.EContainingClass.EPackage.EClassifiers+=extracted_class;
	reference.EReferenceType.addEReference(ref_in);
	reference.EType = extractedClass;
	reference.containment = true;
	reference.name = newReferenceName;
}

/**
 * @param name the name for the extracted class
 * @param reference the reference to extract
 * @param newReferenceName the new name for the reference from the owner class to the
 * extracted class (basically used to rename the original passed reference)
 * @param newOppositeReferenceName the new name for the opposite reference from the original
 * target class to the extracted class (basically used to rename the original opposite reference)
 * @return the extracted metaclass
 */
def extractMetaClass(String name, EReference reference,
			String newReferenceName, String newOppositeReferenceName) {
	if (!checkNotContainment(reference,
			"Cannot apply extractMetaClass on containment reference")) {
		return null
	}
	val owner = reference.EContainingClass
	val ePackage = reference.EContainingClass.EPackage
	val extracted = ePackage.addNewEClass(name)
	val extractedRef = extracted.addNewEReference(reference.name, reference.EReferenceType) [
		makeSingleRequired
	]
	val eOpposite = reference.EOpposite
	if (eOpposite !== null) {
		extracted.addNewEReference(eOpposite.name, owner) [
			makeSingleRequired
			makeBidirectional(reference)
		]
		eOpposite.name = newOppositeReferenceName
		eOpposite.EType = extracted
		eOpposite.makeBidirectional(extractedRef)
	}
	reference.name = newReferenceName
	reference.EType = extracted
	reference.containment = true
	return extracted
}

/**
 * Given a map with key an EClass and value a list of its subclasses,
 * generates an EEnum (in the EClass' package) representing the inheritance relation
 * (the name is the name of the key EClass with "Type" suffix),
 * with an EEnumLiteral for each subclass (the name is the name
 * of the subclass in uppercase); the subclasses are removed, and the
 * key EClass is added an EAttribute with the created EEnum as type
 * (the name is the name of the EEnum, first letter lowercase with "Type"
 * suffix).
 * 
 * For example, give "Base" -> {"Derived1", "Derived2" } as input
 * it creates the EEnum "BaseType" with literals "DERIVED1", "DERIVED2",
 * it adds to "Base" the EAttribute "baseType" of type "BaseType".
 * The EClasses "Derived1" and "Derived2" are removed from the package.
 */
def classificationByHierarchyToEnum(Map<EClass, List<EClass>> classificationsByHierarchy) {
	classificationsByHierarchy
		.forEach[superClass, subClasses|
			val ePackage = superClass.EPackage
			val enumName = ensureEClassifierNameIsUnique
				(ePackage, superClass.name + "Type")
			val enum = ePackage.addNewEEnum(enumName) [
				subClasses.forEach[
					subClass, index |
					val enumLiteralName = ensureEClassifierNameIsUnique
						(ePackage, subClass.name.toUpperCase)
					addNewEEnumLiteral(enumLiteralName) => [
						value = index+1
					]
				]
			]
			superClass.addNewEAttribute(superClass.name.toLowerCase + "Type", enum)
			removeAllElements(subClasses)
		]
}

/**
 * Fix all the passed redundant containers (in the shape of pairs)
 * by setting the eOpposite property.
 * 
 * That is, given the pair r1 -> r2, then r2 is set as the opposite
 * reference of r1 and viceversa.
 */
def redundantContainerToEOpposite(Iterable<Pair<EReference, EReference>> redundantContainers) {
	for (redundant : redundantContainers) {
		makeBidirectional(redundant.key, redundant.value)
	}
}

def isNotReferencedByOthers(EClassifier cl) {
	val find = UsageCrossReferencer.find(cl, cl.packagesToInspect)
	for (s : find) {
		println(getEObjectRepr(s.EObject) + " in " + getEObjectRepr(s.EObject.eContainer))
		println(getEObjectRepr(s.EStructuralFeature))
	}
	find
		.filter[!EcoreUtil.isAncestor(cl, EObject)]
		.empty
}

/**
 * Whether {@link #hasNoReferenceDifferentFromSelf(EClassifier)} and
 * {@link #isNotReferencedByOthers(EClassifier)}
 */
def isDeadClassifier(EClassifier cl) {
	if(cl.hasNoReferenceDifferentFromSelf && cl.isNotReferencedByOthers){
		logInfo["Dead classifier: " + getEObjectRepr(cl)]
		return true;
	}
}

/**
 * Whether the passed EClassifier does not refer anything
 * (not considering a self reference).
 */
def hasNoReferenceDifferentFromSelf(EClassifier c) {
	CrossReferencer.find(newArrayList(c))
		.keySet
		.filter(EClassifier)
		.filter[it !== c]
		.empty
}

/**
 * Whether the passed EClassifier is not referenced by others.
 */
def isNotReferencedByOthers(EClassifier cl) {
	UsageCrossReferencer.find(cl, cl.packagesToInspect)
		.filter[!EcoreUtil.isAncestor(cl, EObject)]
		.empty
}

/**
 * Given an EAttribute, expected to have an EEnum type, creates a subclass of
 * the containing class for each value of the referred EEnum
 * (each subclass is given a name corresponding to the the EEnumLiteral,
 * all lowercase but the first letter, for example, given the literal
 * "LITERAL1", the subclass is given the name "Literal1").
 * The attribute will then be removed and so will the EEnum.
 * The original containing EClass is made abstract.
 * 
 * @param attr
 * @return the collection of created subclasses
 */
def enumToSubclasses(EAttribute attr) : Collection<EClass> {
	val type = attr.EAttributeType
	if (type instanceof EEnum) {
		val createdSubclasses = newHashMap
		val owner = attr.EContainingClass
		owner.makeAbstract
		for (literal : type.ELiterals) {
			val literalString = literal.getLiteral
			val subclassName = ensureEClassifierNameIsUnique
				(owner, literalString.toLowerCase.toFirstUpper)
			createdSubclasses.put(
				literalString,
				owner.addNewEClassAsSibling(subclassName) [
					addESuperType(owner)
				]
			)
		}
		removeElement(type) // will also remove the attribute
		modelMigration[
			createInstanceRule(
				isRelatedTo(owner),
				[oldObj |
					val literalValue =
						oldObj.eGet(getOriginal(attr)).toString()
					val correspondingSubclass =
						createdSubclasses.get(literalValue)
					return EcoreUtil.create(correspondingSubclass)
				]
			)
		]
		return createdSubclasses.values
	} else {
		showError(attr,
			"Not an EEnum: " + getEObjectRepr(type)
		)
		return null
	}
}

/**
 * Given a collection of subclasses, which are expected to be direct subclasses of
 * an EClass, say superclass, generates an EEnum (in the superclass' package)
 * with the specified name, representing the inheritance relation,
 * with an EEnumLiteral for each subclass (the name is the name
 * of the subclass in uppercase); the subclasses are removed, and
 * an attributed is added to the superclass with the created EEnum as type
 * (the name is the name of the EEnum, first letter lowercase).
 * 
 * For example, given the name "BaseType" and the collection of classes
 * {"Derived1", "Derived2"} subclasses of the superclass "Base",
 * it creates the EEnum "BaseType" with literals "DERIVED1", "DERIVED2",
 * (the values will be incremental numbers starting from 0,
 * according to the order of the subclasses in the collection)
 * it adds to "Base" the EAttribute "baseType" of type "BaseType".
 * The EClasses "Derived1" and "Derived2" are removed from the package.
 * 
 * @param name the name for the created EEnum
 * @param subclasses
 * @return the created EAttribute
 */
def subclassesToEnum(String name, Collection<EClass> subclasses) : EAttribute {
	checkNoFeatures(subclasses)
	val superclass = getSingleDirectSuperclass(subclasses)
	val enum = superclass.addNewEEnumAsSibling(name) [
		subclasses.forEach[subClass, index |
			val enumLiteralName = ensureEClassifierNameIsUnique
				(superclass, subClass.name.toUpperCase)
			addNewEEnumLiteral(enumLiteralName) => [
				value = index
			]
		]
	]
	val attribute = superclass.addNewEAttribute(enum.fromTypeToFeatureName, enum)
	superclass.makeConcrete
	removeAllElements(subclasses)
	return attribute
}

