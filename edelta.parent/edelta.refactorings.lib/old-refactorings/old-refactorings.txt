/**
 * @param extractedClass the created EClass created representing the extracted metaclass
 * @param reference
 * @param newReferenceName the new name for the reference from the owner class to the
 * extracted class (basically used to rename the original passed reference)
 * @param newOppositeReferenceName the new name for the opposite reference from the original
 * target class to the extracted class (basically used to rename the original opposite reference)
 */
def extractMetaClass(EClass extractedClass, EReference reference,
				String newReferenceName, String newOppositeReferenceName) : void {
	val ref_in = newEReference(newOppositeReferenceName, extractedClass) [
		lowerBound = reference.EOpposite.lowerBound;
		upperBound = 1;
		// f.EOpposite.upperBound;
	];

	val old_ref = newEReference(reference.name, reference.EReferenceType) [
		lowerBound = 1;
		upperBound = 1;
		EOpposite = ref_in;
	];

	extractedClass.addEReference(old_ref);
	ref_in.EOpposite = old_ref;
	reference.EOpposite.lowerBound = 1;
	reference.EOpposite.upperBound = 1;

	extractedClass.addEReference(reference.EOpposite);

	// already created from outside in the right package
	// f.EContainingClass.EPackage.EClassifiers+=extracted_class;
	reference.EReferenceType.addEReference(ref_in);
	reference.EType = extractedClass;
	reference.containment = true;
	reference.name = newReferenceName;
}