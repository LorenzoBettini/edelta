grammar edelta.Edelta with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate edelta "http://www.Edelta.edelta"

EdeltaProgram:
	{EdeltaProgram}
	importSection=XImportSection?
	('package' name=QualifiedName ';'?)?
	('metamodel' ePackages+=[ecore::EPackage|STRING])*
	(migrations+=EdeltaMigration)*
	(useAsClauses+=EdeltaUseAs)*
	operations+=EdeltaOperation*
	modifyEcoreOperations+=EdeltaModifyEcoreOperation*
;

EdeltaUseAs:
	{EdeltaUseAs} 'use' type=JvmTypeReference 'as' extension?='extension'? name=ValidID
;

EdeltaMigration:
	{EdeltaMigration} 'migrate' nsURI=[ecore::EPackage|STRING] 'to' to=STRING
;

EdeltaModifyEcoreOperation:
	{EdeltaModifyEcoreOperation}
	'modifyEcore' name=ValidID
	'epackage' epackage=[ecore::EPackage]
	body=XBlockExpression
;

EdeltaOperation:
	{EdeltaOperation} 'def'
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		name=ValidID
		'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'
		(':' type=JvmTypeReference)?
		body=XBlockExpression;

// redefine Xbase primary expression with our special expressions
@Override 
XPrimaryExpression returns xbase::XExpression:
	{EdeltaEcoreReferenceExpression} 'ecoreref' '(' reference=EdeltaEcoreReference ')' |
	super
;

EdeltaEcoreReference:
	EdeltaEcoreDirectReference
	(
		{EdeltaEcoreQualifiedReference.qualification=current} '.'
		enamedelement=[ecore::ENamedElement]
	)*
;

EdeltaEcoreDirectReference returns EdeltaEcoreReference:
	{EdeltaEcoreDirectReference} enamedelement=[ecore::ENamedElement]
;

