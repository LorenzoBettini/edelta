/*
 * generated by Xtext 2.21.0
 */
package edelta.scoping;

import static edelta.edelta.EdeltaPackage.Literals.*;
import static edelta.util.EdeltaModelUtil.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipse.xtext.util.IResourceScopeCache;

import com.google.inject.Inject;

import edelta.edelta.EdeltaEcoreQualifiedReference;
import edelta.util.EdeltaEcoreHelper;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class EdeltaScopeProvider extends AbstractEdeltaScopeProvider {
	@Inject
	private IResourceScopeCache cache;

	@Inject
	private EdeltaEcoreHelper edeltaEcoreHelper;

	@Override
	public IScope getScope(final EObject context, final EReference reference) {
		if (reference == EDELTA_ECORE_REFERENCE__ENAMEDELEMENT) {
			if (context instanceof EdeltaEcoreQualifiedReference ecoreQualifiedReference) {
				return Scopes.scopeFor(edeltaEcoreHelper.getENamedElements(
						ecoreQualifiedReference.getQualification().getEnamedelement()));
			}
			return Scopes.scopeFor(edeltaEcoreHelper.getProgramENamedElements(context));
		} else if (reference == EDELTA_MODIFY_ECORE_OPERATION__EPACKAGE) {
			return Scopes.scopeFor(getMetamodels(context));
		} else if (reference == EDELTA_PROGRAM__EPACKAGES) {
			return cache.get("scopeMetamodels", context.eResource(),
				() -> new FilteringScope(delegateGetScope(context, reference),
						it -> "false".equals(it.getUserData("nsURI"))));
		} else if (reference == EDELTA_MIGRATION__NS_URI) {
			return cache.get("scopeMetamodelsURI", context.eResource(),
				() -> new FilteringScope(delegateGetScope(context, reference),
						it -> "true".equals(it.getUserData("nsURI"))));
		}
		return super.getScope(context, reference);
	}
}
