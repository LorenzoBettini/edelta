import org.eclipse.emf.ecore.EStructuralFeature

// IMPORTANT: ecores must be in a source directory
// otherwise you can't refer to them

package com.example

// import existing metamodels
metamodel "mypackage"
metamodel "ecore" // this one should usually be there

// you can define reusable functions...

/*
 * Reusable function
 */
def makeItNotRequired(EStructuralFeature f) {
	f.lowerBound = 0
}

// ...and then modification blocks
// look at the "Outline" view, which immediately shows the modified EPackages

// specify modifications of an EPackage
modifyEcore someModifications epackage mypackage {
	// the currently modified package is available
	// through the implicit parameter 'it', similar to 'this'	

	// use the standard Edelta library functions
	addNewEClass("NewClass") [
		// initialize it in a lambda block
		// where the new class is available through the implicit parameter 'it'
		addNewEAttribute("myStringAttribute", ecoreref(EString))
		// references to Ecore elements can be fully qualified
		addNewEReference("myReference", ecoreref(mypackage.MyClass)) [
			// initialization as above
			// the current element is available through the implicit parameter 'it'
			// use syntactic sugar for setters
			upperBound = -1;
			containment = true;
			// you can call the reusable functions you defined
			makeItNotRequired(it)
		]
	]
}

// you can have several modification blocks for the same EPackage
modifyEcore otherModifications epackage mypackage {
	// you can rename existing classes
	ecoreref(MyClass.myClassStringAttribute).name = "stringAttribute"
	// and the renamed version is immediately available
	ecoreref(stringAttribute).makeItNotRequired
	// the above is an example of use of extension method

	val stringAttr = ecoreref(stringAttribute)

	// you can specify specific model migration rules
	modelMigration[
		transformAttributeValueRule(
			[f | isRelatedTo(f, stringAttr)],
			[feature, oldVal, newVal |
				// turns the old value into an upper case version
				// in the migrated model
				return newVal.toString().toUpperCase();
			]
		)
	]
}