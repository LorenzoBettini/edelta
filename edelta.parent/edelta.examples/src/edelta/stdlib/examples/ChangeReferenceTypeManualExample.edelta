package edelta.stdlib.examples

metamodel "PersonListForChangeType"

modifyEcore exampleOfChangeReferenceType epackage PersonListForChangeType {

	val nameElementValue = ecoreref(nameElementValue)

	// add another class similar to NameElement
	val otherNameElement =
		ecoreref(NameElement)
		.addNewEClassAsSibling("OtherNameElement")
	// copy the feature of NameElement in OtherNameElement
	// with a new name
	val otherNameElementValue = copyToAs(
		ecoreref(nameElementValue),
		otherNameElement,
		"otherNameElementValue"
	)

	val firstName = ecoreref(firstName)

	// manually change the type
	firstName.EType = otherNameElement
	
	// manually specify migration rule
	modelMigration[
		copyRule(
			isRelatedTo(firstName),
			// oldFeature is from the original Ecore
			// oldObj is from the original model
			// newObj has already been copied in the new model
			[oldFeature, oldObj, newObj |
				if (!oldObj.eIsSet(oldFeature))
					return // nothing to migrate
				// retrieve the value of the attribute of the
				// originally referred object (of type NameElement) in the
				// currently being migrated model (that's why getMigrated)
				val oldReferred = getMigrated(
					getValueAsEObject(oldObj, oldFeature)
				)
				val oldValue = oldReferred.eGet(nameElementValue)
				
				// we refer to a new object of type OtherNameElement
				// copying its value from the original referred
				// Object of type NameElement
				newObj.eSet(firstName,
					createInstance(otherNameElement) [
						newRef |
						newRef.eSet(otherNameElementValue,
							oldValue
						)
					]
				)
				// since the original reference Person.firstName was a
				// containment reference, just referring to the newly
				// created object will add it to the model
			]
		)
	]
}