import edelta.refactorings.lib.EdeltaRefactorings
import org.eclipse.emf.ecore.EClass

// IMPORTANT: ecores must be in a source directory
// otherwise you can't refer to them
package edelta.petrinet.example

metamodel "petrinet" 
metamodel "ecore"

use EdeltaRefactorings as refactorings

def addWeightAttribute(EClass c) {
	c.addNewEAttribute("weight", ecoreref(EInt)) [
		makeRequired // lowerBound = 1
	]
}

modifyEcore modifyNet epackage petrinet {
	ecoreref(Net).name = "Petrinet"
	ecoreref(Petrinet.places).makeRequired
	ecoreref(Petrinet.transitions).makeRequired
}

modifyEcore introducePTArc epackage petrinet {
	refactorings.referenceToClass("PTArc", ecoreref(Place.dst)) => [
		addWeightAttribute
	]
	ecoreref(Place.dst).name = "out"
	ecoreref(Transition.src).name = "in"
	ecoreref(PTArc.transition).name = "dst"
	ecoreref(PTArc.place).name = "src"
}

modifyEcore introduceTPArc epackage petrinet {
	refactorings.referenceToClass("TPArc", ecoreref(Transition.dst)) => [
		addWeightAttribute
	]
	ecoreref(Place.src).name = "in"
	ecoreref(Transition.dst).name = "out"
	ecoreref(TPArc.transition).name = "src"
	ecoreref(TPArc.place).name = "dst"
}

modifyEcore introduceAbstractArc epackage petrinet {
	val arc = refactorings.extractSuperclass("Arc",
		#[ecoreref(PTArc.weight), ecoreref(TPArc.weight)])

	val netRef= arc.addNewEReference("net", ecoreref(Petrinet))

	ecoreref(Petrinet).addNewEReference("arcs", arc) [
		makeContainment
		makeMultiple
		makeBidirectional(netRef)
	]
}
