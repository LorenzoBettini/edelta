/*
 * generated by Xtext 2.21.0
 */
package edelta.ui.contentassist;

import static org.eclipse.xtext.EcoreUtil2.getContainerOfType;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

import edelta.edelta.EdeltaEcoreReferenceExpression;
import edelta.resource.derivedstate.EdeltaDerivedStateHelper;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 * 
 * @author Lorenzo Bettini
 */
public class EdeltaProposalProvider extends AbstractEdeltaProposalProvider {

	@Inject
	private EdeltaDerivedStateHelper derivedStateHelper;

	@Inject
	private IQualifiedNameProvider qualifiedNameProvider;

	/**
	 * Avoids proposing subpackages since in Edelta they are not allowed
	 * to be directly imported.
	 */
	@Override
	public void completeEdeltaProgram_Metamodels(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		lookupCrossReference(
			((CrossReference) assignment.getTerminal()),
			context,
			acceptor,
			// EPackage are not loaded at this point, so we cannot rely
			// on super package relation.
			// Instead we rely on the fact that subpackages have segments
			(IEObjectDescription desc) ->
				desc.getQualifiedName().getSegmentCount() == 1
		);
	}

	/**
	 * Only proposes elements that are available in this context.
	 */
	@Override
	public void completeEdeltaEcoreDirectReference_Enamedelement(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		proposalsForEcoreReference(model, assignment, context, acceptor);
	}

	/**
	 * Only proposes elements that are available in this context.
	 */
	@Override
	public void completeEdeltaEcoreReference_Enamedelement(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		proposalsForEcoreReference(model, assignment, context, acceptor);
	}

	/**
	 * Only proposes elements that are available in this context.
	 */
	private void proposalsForEcoreReference(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		final var accessibleElements =
				derivedStateHelper.getAccessibleElements(
						getContainerOfType(model, EdeltaEcoreReferenceExpression.class));
		lookupCrossReference(
			((CrossReference)assignment.getTerminal()),
			context,
			acceptor,
			(IEObjectDescription desc) ->
			accessibleElements.stream()
				.anyMatch(elem -> elem.getQualifiedName().equals(
						qualifiedNameProvider.getFullyQualifiedName(desc.getEObjectOrProxy())))
			);
	}
}
