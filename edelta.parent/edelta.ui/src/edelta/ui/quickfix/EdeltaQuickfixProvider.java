/**
 * generated by Xtext 2.10.0
 */
package edelta.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.annotations.ui.quickfix.XbaseWithAnnotationsQuickfixProvider;

import edelta.edelta.EdeltaProgram;
import edelta.util.EdeltaModelUtil;
import edelta.validation.EdeltaValidator;

/**
 * Custom quickfixes.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class EdeltaQuickfixProvider extends XbaseWithAnnotationsQuickfixProvider {

	@Fix(EdeltaValidator.INVALID_SUBPACKAGE_IMPORT)
	public void importRootPackage(final Issue issue, final IssueResolutionAcceptor acceptor) {
		final String rootPackageName = issue.getData()[0];
		acceptor.accept(
			issue,
			"Import root EPackage",
			"Import root EPackage \'" + rootPackageName + "\'",
			"EPackage.gif",
			context -> 
				context.getXtextDocument().replace(
					issue.getOffset(),
					issue.getLength(),
					"\"" + rootPackageName + "\"")
		);
	}

	@Fix(EdeltaValidator.INTERPRETER_ACCESS_RENAMED_ELEMENT)
	public void useRenamedElement(final Issue issue, final IssueResolutionAcceptor acceptor) {
		final String renamed = issue.getData()[0];
		acceptor.accept(
			issue,
			"Use renamed element",
			"Use renamed element \'" + renamed + "\'",
			"EObject.gif",
			context -> 
				context.getXtextDocument().replace(
					issue.getOffset(),
					issue.getLength(),
					renamed)
		);
	}

	@Fix(EdeltaValidator.AMBIGUOUS_REFERENCE)
	public void fixEcoreRefAmbiguity(final Issue issue, final IssueResolutionAcceptor acceptor) {
		final String[] alternatives = issue.getData();
		for (String alternative : alternatives) {
			acceptor.accept(
				issue,
				"Fix ambiguity with \'" + alternative + "\'",
				"Fix ambiguity with \'" + alternative + "\'",
				"EObject.gif",
				context -> 
					context.getXtextDocument().replace(
						issue.getOffset(),
						issue.getLength(),
						alternative)
			);
		}
	}

	@Fix(EdeltaValidator.DUPLICATE_METAMODEL_IMPORT)
	public void removeDuplicateMetamodelImport(final Issue issue, final IssueResolutionAcceptor acceptor) {
		final int importToRemove = Integer.parseInt(issue.getData()[0]);
		acceptor.accept(
			issue,
			"Remove duplicate metamodel import",
			"Remove duplicate metamodel import",
			"EPackage.gif",
			(EObject element, IModificationContext context) -> {
				INode node = EdeltaModelUtil.getMetamodelImportNodes
					((EdeltaProgram) element).get(importToRemove);
				// the node corresponding to the keyword 'metamodel'
				INode metamodelNode = node.getPreviousSibling().getPreviousSibling();
				int offset = metamodelNode.getOffset();
				int length = node.getEndOffset() - offset  + 1;
				// also remove newline
				context.getXtextDocument().replace(offset, length, "");
			}
		);
	}

}
