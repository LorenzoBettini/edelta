/**
 * generated by Xtext 2.10.0
 */
package edelta.ui.labeling;

import static com.google.common.collect.Iterables.filter;
import static org.eclipse.xtext.xbase.lib.IterableExtensions.head;

import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.StyledString.Styler;
import org.eclipse.swt.graphics.TextStyle;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.xbase.annotations.ui.labeling.XbaseWithAnnotationsLabelProvider;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;

import com.google.inject.Inject;

import edelta.edelta.EdeltaModifyEcoreOperation;
import edelta.edelta.EdeltaOperation;
import edelta.resource.derivedstate.EdeltaDerivedStateHelper;

/**
 * Provides labels for EObjects.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
public class EdeltaLabelProvider extends XbaseWithAnnotationsLabelProvider {
	@Inject
	private IJvmModelAssociations jvmModelAssociations;

	@Inject
	private EdeltaDerivedStateHelper derivedStateHelper;

	private AdapterFactoryLabelProvider delegate;

	private static final Styler BOLD_FONT_STYLER = new Styler() {
		@Override
		public void applyStyles(final TextStyle textStyle) {
			textStyle.font = JFaceResources.getFontRegistry().getBold("Edelta");
		}
	};

	@Inject
	public EdeltaLabelProvider(final AdapterFactoryLabelProvider delegate) {
		super(delegate);
		this.delegate = delegate;
	}

	public Object text(final EdeltaOperation m) {
		return this.text(this.inferredJavaMethod(m));
	}

	public ImageDescriptor image(final EdeltaOperation m) {
		return this.imageDescriptor(this.inferredJavaMethod(m));
	}

	public Object text(final EdeltaModifyEcoreOperation m) {
		return this.text(this.inferredJavaMethod(m));
	}

	public ImageDescriptor image(final EdeltaModifyEcoreOperation m) {
		return this.imageDescriptor(this.inferredJavaMethod(m));
	}

	public Object text(final ENamedElement e) {
		// delegate to the default Ecore edit label provider
		// for Ecore model elements.
		final var text = delegate.getText(e);
		if (e instanceof EPackage) {
			return text; // no need to highlight EPackage
			// since only the ones with modified elements are shown in the outline
		}
		if (derivedStateHelper.getModifiedElements(e.eResource()).contains(e)) {
			return new StyledString(text, BOLD_FONT_STYLER);
		}
		return text;
	}

	private JvmOperation inferredJavaMethod(final EObject e) {
		return head(filter(jvmModelAssociations.getJvmElements(e), JvmOperation.class));
	}
}
