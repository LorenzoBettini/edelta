/*
 * generated by Xtext 2.20.0
 */
package edelta.ui.wizard

import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class EdeltaProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new EdeltaEmptyProjectTemplate, new EdeltaExampleProjectTemplate]
	}
}

@ProjectTemplate(
	label="Edelta Empty Project",
	icon="project_template.png",
	description="<p><b>Edelta Empty Project</b></p>
<p>An Edelta Empty Project, with source folders and minimal dependencies.</p>")
final class EdeltaEmptyProjectTemplate {
	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			withPluginXml = false
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			requiredBundles += "edelta.lib"
			folders += #["src", "edelta-gen", "ecoreversions"]
			addFile(".settings/org.eclipse.core.resources.prefs", '''
				eclipse.preferences.version=1
				encoding/<project>=UTF-8
			'''
			)
			addFile("README", '''
				Modified ecores will be saved in the directory "modified".
				Place the versions of Ecore files in "ecoreversions"
			'''
			)
			addFile("modified/.gitignore", '''
				*
				!.gitignore
			''')
		])
	}
}

@ProjectTemplate(label="Edelta Example Project", icon="project_template.png", description="<p><b>Edelta Example Project</b></p>
<p>An Edelta Example Project, with some initial contents: an Ecore file and an Edelta file.</p>")
final class EdeltaExampleProjectTemplate {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val path = text("Package:", "com/example", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		path.enabled = advanced.value
		if (!advanced.value) {
			path.value = "com/example"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			withPluginXml = false
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			requiredBundles += "edelta.lib"
			folders += #["src", "edelta-gen", "model"]
			addFile(".settings/org.eclipse.core.resources.prefs", '''
				eclipse.preferences.version=1
				encoding/<project>=UTF-8
			'''
			)
			addFile("modified/README", '''
				Modified ecores will be saved here (see Main.java file)
			'''
			)
			addFile("model/My.ecore", '''
				<?xml version="1.0" encoding="UTF-8"?>
				<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="mypackage" nsURI="http://my.package.org" nsPrefix="mypackage">
				  <eClassifiers xsi:type="ecore:EClass" name="MyClass">
				    <eStructuralFeatures xsi:type="ecore:EAttribute" name="myClassStringAttribute"
				        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
				  </eClassifiers>
				  <eClassifiers xsi:type="ecore:EClass" name="MyRoot">
				    <eStructuralFeatures xsi:type="ecore:EReference" name="myReferences" upperBound="-1"
				        eType="#//MyClass"/>
				    <eStructuralFeatures xsi:type="ecore:EReference" name="myContents" upperBound="-1"
				        eType="#//MyClass" containment="true"/>
				  </eClassifiers>
				</ecore:EPackage>
			''')
			addFile("model/MyClass.xmi", '''
				<?xml version="1.0" encoding="UTF-8"?>
				<mypackage:MyClass
				    xmi:version="2.0"
				    xmlns:xmi="http://www.omg.org/XMI"
				    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				    xmlns:mypackage="http://my.package.org"
				    xsi:schemaLocation="http://my.package.org My.ecore"
				    myClassStringAttribute="My Attribute Value"/>
			''')
			addFile("model/MyRoot.xmi", '''
				<?xml version="1.0" encoding="UTF-8"?>
				<mypackage:MyRoot
				    xmi:version="2.0"
				    xmlns:xmi="http://www.omg.org/XMI"
				    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				    xmlns:mypackage="http://my.package.org"
				    xsi:schemaLocation="http://my.package.org My.ecore"
				    myReferences="//@myContents.1">
				  <myContents
				      myClassStringAttribute="contained not referred"/>
				  <myContents
				      myClassStringAttribute="contained referred"/>
				</mypackage:MyRoot>
			''')
			addFile('''src/«path»/Example.edelta''', '''
				import org.eclipse.emf.ecore.EStructuralFeature
				
				// IMPORTANT: ecores must be in a source directory
				// otherwise you can't refer to them
				
				package «path.value.replaceAll("/", ".")»
				
				// import existing metamodels
				metamodel "mypackage"
				metamodel "ecore" // this one should usually be there
				
				// you can define reusable functions...
				
				/*
				 * Reusable function
				 */
				def makeItNotRequired(EStructuralFeature f) {
					f.lowerBound = 0
				}
				
				// ...and then modification blocks
				// look at the "Outline" view, which immediately shows the modified EPackages
				
				// specify modifications of an EPackage
				modifyEcore someModifications epackage mypackage {
					// the currently modified package is available
					// through the implicit parameter 'it', similar to 'this'	
				
					// use the standard Edelta library functions
					addNewEClass("NewClass") [
						// initialize it in a lambda block
						// where the new class is available through the implicit parameter 'it'
						addNewEAttribute("myStringAttribute", ecoreref(EString))
						// references to Ecore elements can be fully qualified
						addNewEReference("myReference", ecoreref(mypackage.MyClass)) [
							// initialization as above
							// the current element is available through the implicit parameter 'it'
							// use syntactic sugar for setters
							upperBound = -1;
							containment = true;
							// you can call the reusable functions you defined
							makeItNotRequired(it)
						]
					]
				}
				
				// you can have several modification blocks for the same EPackage
				modifyEcore otherModifications epackage mypackage {
					// you can rename existing classes
					ecoreref(MyClass.myClassStringAttribute).name = "stringAttribute"
					// and the renamed version is immediately available
					ecoreref(stringAttribute).makeItNotRequired
					// the above is an example of use of extension method
				
					val stringAttr = ecoreref(stringAttribute)
				
					// you can specify specific model migration rules
					modelMigration[
						transformAttributeValueRule(
							[f | isRelatedTo(f, stringAttr)],
							[feature, oldVal, newVal |
								// turns the old value into an upper case version
								// in the migrated model
								return newVal.toString().toUpperCase();
							]
						)
					]
				}
			''')
			addFile('''src/«path»/Main.java''', '''
				package «path.value.replaceAll("/", ".")»;
				
				import edelta.lib.EdeltaEngine;
				
				public class Main {
				
					public static void main(String[] args) throws Exception {
						// create the engine specifying the generated Java class
						EdeltaEngine engine = new EdeltaEngine(Example::new);
						// Make sure you load all the used Ecores (Ecore.ecore is always loaded)
						engine.loadEcoreFile("model/My.ecore");
						// In case, also load model files
						engine.loadModelFile("model/MyClass.xmi");
						engine.loadModelFile("model/MyRoot.xmi");
						// Execute the actual transformations defined in the DSL
						engine.execute();
						// Save the modified Ecores and models into a new path
						engine.save("modified");
					}
				}
			''')
		])
	}
}
