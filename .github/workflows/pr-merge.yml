# This workflow will build a Java project with Maven
# This runs only when a PR is merged, to create or update the cache
# This is useful because the builds on Windows and MacOS are triggered
# only on PR, so, for new branches, the cache is always empty, since
# the builds on PR will not update the cache on the master branch.
# This workflow will update the cache for Windows and MacOS on the master branch
# when the PR is merged (actually it will update on the base branch of a merged PR).
# The build consists in a Maven run but skipping tests.
# The Maven build is run only if we did not have a cache hit.

name: Updates Cache on Windows and MacOS

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      # Push events on the main branch
      - master
      # Push events to branches matching
      - experiments*

jobs:
  build:
    if: contains(github.event.head_commit.message, 'Merge pull request')
    strategy:
      matrix:
        os: ['macos-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache Maven packages
      uses: actions/cache@v2
      id: m2cache # note the cache id, see below for cache-hit
      with:
        path: |
          ~/.m2
          ~/.sonar/cache
          !**/*edelta*
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
    - name: Build with Maven
      run: ./mvnw -f edelta.parent/pom.xml clean verify -Pbuild-ide,test-ide,run-its -DskipTests
      if: runner.os == 'macOS' && steps.m2cache.outputs.cache-hit != 'true' # note the use of the id 'm2cache'
    - name: Build with Maven
      run: .\mvnw.cmd -f edelta.parent/pom.xml clean verify '-Pbuild-ide,test-ide,run-its' -DskipTests
      if: runner.os == 'Windows' && steps.m2cache.outputs.cache-hit != 'true' # note the use of the id 'm2cache'
